name: Migrate Repository-Level Secret Scanning Results Remediation State

on:
  issues:
    types: [opened, edited]

jobs:
  extract_migration_level:
    runs-on: ubuntu-latest
    outputs:
      migration_level: ${{ steps.extract.outputs.migration_level }}
    steps:
      - name: Get Migration Level from Issue Body
        id: extract
        uses: actions/github-script@v6
        with:
          script: |
            const issueBody = context.payload.issue.body;
            const migrationLevelMatch = issueBody.match(/### Migration Level\s*\n*(.*)/);
            const migrationLevel = migrationLevelMatch ? migrationLevelMatch[1].trim() : "Repository"; // default to Repository
            console.log("Migration Level: ", migrationLevel);
            core.setOutput("migration_level", migrationLevel);
      - name: Validate PAT tokens
        run: |
          if [[ -z "${{ secrets.SOURCE_TOKEN }}" ]]; then
            echo "Source Token is missing!"
            exit 1
          fi
          if [[ -z "${{ secrets.TARGET_TOKEN }}" ]]; then
          echo "Target Token is missing!"
          exit 1
          fi
        shell: bash
        
  Repo-level-migration:
    runs-on: ubuntu-latest
    needs: extract_migration_level
    if: ${{ needs.extract_migration_level.outputs.migration_level == 'Repository' }}  # Check migration level output

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v3

    - name: Set up PowerShell
      uses: actions/setup-python@v4

    - name: Validate PAT tokens
      run: |
        if [[ -z "${{ secrets.SOURCE_TOKEN }}" ]]; then
          echo "Source Token is missing!"
          exit 1
        fi
        if [[ -z "${{ secrets.TARGET_TOKEN }}" ]]; then
          echo "Target Token is missing!"
          exit 1
        fi
      shell: bash

    - name: Get Issue Body
      id: issue_body
      uses: actions/github-script@v6
      with:
        script: |
          const issueBody = context.payload.issue.body;
          console.log("Issue Body: ", issueBody);

          // Use regex to extract organization and repository names
          const sourceOrgMatch = issueBody.match(/### Source Organization\s*\n*(.*)/);
          const sourceRepoMatch = issueBody.match(/### Source Repository\s*\n*(.*)/);
          const targetOrgMatch = issueBody.match(/### Target Organization\s*\n*(.*)/);
          const targetRepoMatch = issueBody.match(/### Target Repository\s*\n*(.*)/);

          const sourceOrg = sourceOrgMatch ? sourceOrgMatch[1].trim() : "Not provided";
          const sourceRepo = sourceRepoMatch ? sourceRepoMatch[1].trim() : "Not provided";
          const targetOrg = targetOrgMatch ? targetOrgMatch[1].trim() : "Not provided";
          const targetRepo = targetRepoMatch ? targetRepoMatch[1].trim() : "Not provided";

          console.log("Source Organization: ", sourceOrg);
          console.log("Source Repository: ", sourceRepo);
          console.log("Target Organization: ", targetOrg);
          console.log("Target Repository: ", targetRepo);

          core.setOutput("source_org", sourceOrg);
          core.setOutput("source_repo", sourceRepo);
          core.setOutput("target_org", targetOrg);
          core.setOutput("target_repo", targetRepo);

    - name: Print Variables
      run: |
        echo "Source Organization: ${{ steps.issue_body.outputs.source_org }}"
        echo "Source Repository: ${{ steps.issue_body.outputs.source_repo }}"
        echo "Target Organization: ${{ steps.issue_body.outputs.target_org }}"
        echo "Target Repository: ${{ steps.issue_body.outputs.target_repo }}"

    - name: Run the PowerShell migration script
      run: |
        pwsh ./scripts/migrate_secret_states.ps1 -sourceOrg "${{ steps.issue_body.outputs.source_org }}" -sourceRepo "${{ steps.issue_body.outputs.source_repo }}" -targetOrg "${{ steps.issue_body.outputs.target_org }}" -targetRepo "${{ steps.issue_body.outputs.target_repo }}" -sourceToken "${{ secrets.SOURCE_TOKEN }}" -targetToken "${{ secrets.TARGET_TOKEN }}"
      shell: pwsh
